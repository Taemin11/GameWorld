{"remainingRequest":"C:\\Users\\multicampus\\swfront2\\swfront\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\multicampus\\swfront2\\swfront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\multicampus\\swfront2\\swfront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\multicampus\\swfront2\\swfront\\src\\components\\Recommend.vue?vue&type=template&id=dfab6a88&scoped=true&","dependencies":[{"path":"C:\\Users\\multicampus\\swfront2\\swfront\\src\\components\\Recommend.vue","mtime":1616659408367},{"path":"C:\\Users\\multicampus\\swfront2\\swfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\swfront2\\swfront\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\swfront2\\swfront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\swfront2\\swfront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}